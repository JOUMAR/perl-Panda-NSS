=head1 NAME

Panda::NSS - NSS bindings for Perl

=head1 SYNOPSYS

  # verify certificate
  use Panda::NSS;

  Panda::NSS::init($nssdb_path);
  Panda::NSS::add_builtins();

  my $cert = Panda::NSS::Cert->new($cert_data_in_der_format);

  if ($cert->simple_verify(Panda::NSS::CERTIFICATE_USAGE_OBJECT_SIGNER)) {
      print "Certificate OK\n";
  }
  else {
      print "Certificate NOT VALID\n";
  }

=head1 DESCRIPTION

This library is in very early stage of development. Any API can change.
Currently you can verify certificates with AIA extension (when not all chain exists locally).

=head1 FUNCTIONS

=over 4

=item C<< Panda::NSS::init( [ $certdb_path ] ) >>

This function initialize NSS library. It calls C<NSS_InitReadWrite(dbpath)>.
However you may not specify C<$certdb_path>, in that case C<NSS_NoDB_Init()>
called, that mode not very useful for certificate checks.

=item C<< Panda::NSS::add_builtins() >>

This function load I<nssckbi> module, that contains default root certificates
in NSS. May croaks if library initialized without I<certdb>.

=back

=head1 CONSTANTS

=head2 Certificate usage

=over 4

=item C<< Panda::NSS::CERTIFICATE_USAGE_CHECK_ALL_USAGES >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_SSL_CLIENT >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_SSL_SERVER >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_SSL_SERVER_WITH_STEP_UP >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_SSL_CA >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_EMAIL_SIGNER >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_EMAIL_RECIPIENT >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_OBJECT_SIGNER >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_USER_CERT_IMPORT >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_VERIFY_CA >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_PROTECTED_OBJECT_SIGNER >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_STATUS_RESPONDER >>

=item C<< Panda::NSS::CERTIFICATE_USAGE_ANY_CA >>

=back

=head1 CLASSES

=head2 C<< Panda::NSS::Cert >>

=head3 CONSTRUCTOR

=over 4

=item C<< $cert = Panda::NSS::Cert->new( $cert_data_in_der_format ) >>

Constructs certificate object.

=back

=head3 METHODS

=over 4

=item C<< $rv = $cert->simple_verify( [ $usage ], [ $time ]) >>

Method do verification process (it uses C<CERT_PKIXVerifyCert> from I<NSS>).
Returns C<true> if certificate valid.

=back

=head1 SEE ALSO

=over 4

=item L<Crypt::NSS::X509>

Another try to bind NSS to Perl.

=item L<Crypt::OpenSSL::X509>

Allow to work with certificates, but can't validate with AIA.

=head1 LICENSE

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut

